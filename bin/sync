#!/usr/bin/env php
<?php

$workingPath = getcwd();

require __DIR__.'/../vendor/autoload.php';

$files = new Illuminate\Filesystem\Filesystem();

Illuminate\Support\Collection::make([
    'resource.stub',
    'lens.stub',
    'partition.stub',
    'progress.stub',
    'table.stub',
    'trend.stub',
    'value.stub',
    'action.stub',
    'action.queued.stub',
    'destructive-action.stub',
    'destructive-action.queued.stub',
    'dashboard.stub',
    'user-resource.stub',
    'NovaServiceProvider.stub',
])->transform(fn ($file) => "{$workingPath}/vendor/laravel/nova/src/Console/stubs/{$file}")
->map(fn ($file) => str_contains($file, '*') ? [...$files->glob($file)] : $file)
->flatten()
->each(function ($file) use ($files, $workingPath) {
    $files->copy($file, "{$workingPath}".Illuminate\Support\Str::after($file, "{$workingPath}/vendor/laravel/nova/src/Console"));
});

$files->copy("{$workingPath}/vendor/laravel/nova/src/Console/stubs/base-resource.stub", "{$workingPath}/stubs/base-resource.stub");
transform([
    "{{ namespace }}" => "{{WorkbenchAppNamespace}}\Nova",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/stubs/base-resource.stub"));

$files->copy("{$workingPath}/vendor/laravel/nova/src/Console/stubs/main-dashboard.stub", "{$workingPath}/stubs/main-dashboard.stub");
transform([
    "namespace App\Nova\Dashboards" => "namespace {{ namespace }}",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/stubs/main-dashboard.stub"));

transform([
    "namespace App\Nova;" => "namespace {{WorkbenchAppNamespace}}\Nova;",
    "use Laravel\Nova\Fields\Gravatar;".PHP_EOL => "",
    "@var class-string<\App\Models\User>" => "@var class-string<\{{WorkbenchAppNamespace}}\Models\User>",
    "    public static \$model = \App\Models\User::class;" =>  "    public static \$model = \{{WorkbenchAppNamespace}}\Models\User::class;",
    "            Gravatar::make()->maxWidth(50),".PHP_EOL.PHP_EOL => "",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/stubs/user-resource.stub"));

transform([
    "namespace App\Providers;" => "namespace {{WorkbenchAppNamespace}}\Providers;",
    PHP_EOL."use App\Models\User;" => "",
    "use Laravel\Nova\Nova;" => "use Laravel\Nova\DevTool\DevTool as Nova;",
    "->withAuthenticationRoutes()" => "->withAuthenticationRoutes(default: true)",
    "        Gate::define('viewNova', function (User \$user) {
            return in_array(\$user->email, [
                //
            ]);
        });
" => "        Gate::define('viewNova', function (\$user) {
            return true;
        });
",
    "new \App\Nova\Dashboards\Main," => "new \Laravel\Nova\Dashboards\Main,",
    "    /**
     * Register any application services.
" => "    /**
     * Register the application's Nova resources.
     */
    protected function resources(): void
    {
        Nova::resourcesInWorkbench();
    }

    /**
     * Register any application services.
"
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/stubs/NovaServiceProvider.stub"));

if (! $files->isFile("{$workingPath}/vendor/laravel/nova/webpack.mix.js")) {
    $files->copy("{$workingPath}/vendor/laravel/nova/webpack.mix.js.dist", "{$workingPath}/vendor/laravel/nova/webpack.mix.js");
}

Illuminate\Support\Collection::make([
    'npm ci',
    'npm run prod',
])->each(function ($command) use ($workingPath) {
    tap(
        Symfony\Component\Process\Process::fromShellCommandline($command, "{$workingPath}/vendor/laravel/nova"),
        function ($process) {
            $process->setTty(true);
            $process->setTimeout(3600);
            $process->mustRun();
        }
    );
});

Illuminate\Support\Collection::make([
    'npm ci',
    'npx -p typescript tsc',
])->each(function ($command) use ($workingPath) {
    tap(
        Symfony\Component\Process\Process::fromShellCommandline($command, $workingPath),
        function ($process) {
            $process->setTty(true);
            $process->setTimeout(3600);
            $process->mustRun();
        }
    );
});

$files->ensureDirectoryExists("{$workingPath}/types/@types/laravel-nova-ui");

Illuminate\Support\Collection::make([
    ...$files->glob("{$workingPath}/vendor/laravel/nova/resources/types/components/*"),
])->flatten()
->filter(fn ($file) => is_file($file))
->each(function ($file) use ($files, $workingPath) {
    $files->copy($file, "{$workingPath}/types/@types/laravel-nova-ui".Illuminate\Support\Str::after($file, "{$workingPath}/vendor/laravel/nova/resources/types/components"));
});
